/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    posts: Post;
    tags: Tag;
    media: Media;
    categories: Category;
    users: User;
    cars: Car;
    brands: Brand;
    reviews: Review;
    'page-settings': PageSetting;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    cars: CarsSelect<false> | CarsSelect<true>;
    brands: BrandsSelect<false> | BrandsSelect<true>;
    reviews: ReviewsSelect<false> | ReviewsSelect<true>;
    'page-settings': PageSettingsSelect<false> | PageSettingsSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    header: Header;
    footer: Footer;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact';
    richText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline') | null;
          };
          id?: string | null;
        }[]
      | null;
    media?: (string | null) | Media;
  };
  layout: (
    | CallToActionBlock
    | ContentBlock
    | MediaBlock
    | ArchiveBlock
    | FormBlock
    | CustomHeroBlock
    | FlexGridBoxBlock
    | ImageSectionBlock
    | FeatureSectionBlock
    | CarsCarousel
    | {
        title: string;
        description?: string | null;
        button?: {
          label?: string | null;
          href?: string | null;
        };
        image: string | Media;
        id?: string | null;
        blockName?: string | null;
        blockType: 'aboutUsBlock';
      }
    | {
        title: string;
        description?: string | null;
        buttons?:
          | {
              label: string;
              href: string;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'journeyCTA';
      }
    | TwoImageColumn
    | {
        backgroundImage: string | Media;
        title: string;
        id?: string | null;
        blockName?: string | null;
        blockType: 'testimonialCarousel';
      }
    | {
        heading: string;
        image: string | Media;
        features?:
          | {
              title: string;
              description: string;
              id?: string | null;
            }[]
          | null;
        button?: {
          label?: string | null;
          href?: string | null;
        };
        imagePosition: 'left' | 'right';
        id?: string | null;
        blockName?: string | null;
        blockType: 'featureHighlight';
      }
    | VideoBlock
    | {
        /**
         * Full-width background image
         */
        backgroundImage: string | Media;
        /**
         * Main heading text (e.g. “Everything you Need to Know”)
         */
        title: string;
        id?: string | null;
        blockName?: string | null;
        blockType: 'secondaryHero';
      }
    | {
        heading?: string | null;
        backgroundImage: string | Media;
        cardTitle?: string | null;
        cardPhone?: string | null;
        cardEmail?: string | null;
        cardAddress1?: string | null;
        cardAddress2?: string | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'contactForm';
      }
    | InventoryBlock
    | HeroCarsCarousel
    | {
        backgroundImage: string | Media;
        title: string;
        countdownMonth: '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12';
        /**
         * Day of month (1–31). We will clamp to valid days for the chosen month.
         */
        countdownDay: number;
        primaryButton: {
          label: string;
          url: string;
        };
        secondaryButton: {
          label: string;
          url: string;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'comingSoonBlock';
      }
    | {
        title: string;
        button?: {
          label?: string | null;
          url?: string | null;
        };
        /**
         * Enter plain text only (no formatting).
         */
        paragraph: string;
        id?: string | null;
        blockName?: string | null;
        blockType: 'twoColumnCTA';
      }
    | {
        color?: string | null;
        duration?: number | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'lineBlock';
      }
    | {
        video: string | Media;
        poster?: (string | null) | Media;
        title: string;
        /**
         * Plain text only.
         */
        paragraph: string;
        button: {
          label: string;
          url: string;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'videoCta';
      }
    | {
        backgroundImage: string | Media;
        title: string;
        description: string;
        button: {
          label: string;
          url: string;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'imageHero';
      }
    | {
        backgroundImage: string | Media;
        leftTitle: string;
        primaryButton: {
          label: string;
          url: string;
        };
        secondaryButton: {
          label: string;
          url: string;
        };
        rightHeading: string;
        rightParagraph: string;
        id?: string | null;
        blockName?: string | null;
        blockType: 'twoColumnHero';
      }
    | {
        backgroundImage: string | Media;
        title: string;
        description?: string | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'centeredHero';
      }
    | {
        /**
         * How many columns on md+ screens.
         */
        columnsDesktop: '1' | '2';
        cards?:
          | {
              image: string | Media;
              title: string;
              description: string;
              button: {
                label: string;
                url: string;
              };
              spanFullOnDesktop?: boolean | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'cardGrid';
      }
    | {
        image: string | Media;
        imageAlt?: string | null;
        title: string;
        text: string;
        reverse?: boolean | null;
        textAlign: 'left' | 'center';
        id?: string | null;
        blockName?: string | null;
        blockType: 'imageText';
      }
    | MissionGallery
    | {
        title: string;
        description: string;
        button: {
          label: string;
          url: string;
        };
        image: string | Media;
        imageAlt?: string | null;
        reverse?: boolean | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'split4060';
      }
    | LinkBanner
    | WhenToVisit
    | EventLocation
    | ImageTextCTA
    | ContactBanner
    | SimpleHeading
    | CharityCards
    | TextImageBlock
    | ExpectCards
    | LogoTextCTA
    | TextWithCTAs
    | ReachTextCards
    | PartnerBenefits
    | RightImageCTA
    | TextImageRight
    | PackagesGrid
    | AudienceGrid
    | ScheduleSplit
    | ImageLeftCenteredList
    | MerchShowcase
    | ImageOverlayText
    | TextImageRightLite
    | TextCTAImageRight
    | ImageStepsRight
    | TextVideoRight
    | CenteredBannerCTA
    | QuickDownloads
    | HelpfulLinksGrid
    | NewsHeroFilter
    | BlogTwoColumn
    | BannerBlock
  )[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  title: string;
  thumbnail: string | Media;
  /**
   * Overlay badges on the thumbnail (e.g., THE SHOW)
   */
  tags?: (string | Tag)[] | null;
  /**
   * Optional override text if you don’t want to manage Tags
   */
  thumbnailBadge?: string | null;
  /**
   * Short description for the card
   */
  excerpt?: string | null;
  layout: (BlogHero | BlogTwoColumn)[];
  relatedPosts?: (string | Post)[] | null;
  categories?: (string | Category)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  authors?: (string | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * 📁 Upload media.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: string;
  name: string;
  slug: string;
  color?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BlogHero".
 */
export interface BlogHero {
  background: string | Media;
  title: string;
  description?: string | null;
  darken?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'blogHero';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BlogTwoColumn".
 */
export interface BlogTwoColumn {
  left: (TextSlice | ImageSlice)[];
  right?: {
    /**
     * Pick up to 3 related posts
     */
    relatedPosts?: (string | Post)[] | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'blogTwoColumn';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextSlice".
 */
export interface TextSlice {
  text: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'textSlice';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageSlice".
 */
export interface ImageSlice {
  image: string | Media;
  caption: string;
  description: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'imageSlice';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (string | null) | Category;
  breadcrumbs?:
    | {
        doc?: (string | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: string | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  populateBy?: ('collection' | 'selection') | null;
  relationTo?: 'posts' | null;
  categories?: (string | Category)[] | null;
  limit?: number | null;
  selectedDocs?:
    | {
        relationTo: 'posts';
        value: string | Post;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: string | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CustomHeroBlock".
 */
export interface CustomHeroBlock {
  backgroundImage: string | Media;
  leftText: string;
  rightSmallText?: string | null;
  titleLine1: string;
  titleLine2: string;
  link?: string | null;
  linkText?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'customhero';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FlexGridBoxBlock".
 */
export interface FlexGridBoxBlock {
  gap?: number | null;
  matrix?:
    | {
        items?:
          | {
              title: string;
              subtitle: string;
              flex: number;
              bgColor?: string | null;
              textAlign?: ('start' | 'end') | null;
              img?: (string | null) | Media;
              enableLink?: boolean | null;
              link?: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?:
                  | ({
                      relationTo: 'pages';
                      value: string | Page;
                    } | null)
                  | ({
                      relationTo: 'posts';
                      value: string | Post;
                    } | null);
                url?: string | null;
                label: string;
                /**
                 * Choose how the link should be rendered.
                 */
                appearance?: ('default' | 'outline') | null;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'flexGridBox';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageSectionBlock".
 */
export interface ImageSectionBlock {
  backgroundImage: string | Media;
  heading: string;
  description: string;
  link: string;
  linkText?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'image-section';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeatureSectionBlock".
 */
export interface FeatureSectionBlock {
  backgroundImage: string | Media;
  heading: string;
  description: string;
  link: string;
  features: {
    icon: string | Media;
    title: string;
    id?: string | null;
  }[];
  buttonText?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'featureSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CarsCarousel".
 */
export interface CarsCarousel {
  title: string;
  subTitle: string;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'carsCarousel';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TwoImageColumn".
 */
export interface TwoImageColumn {
  topTitle: string;
  topText: string;
  image1: string | Media;
  image2: string | Media;
  approachTitle: string;
  approachText: string;
  quote: string;
  quoteAttribution?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'twoImageColumn';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "VideoBlock".
 */
export interface VideoBlock {
  title: string;
  text: string;
  buttonText: string;
  buttonLink: string;
  video: string | Media;
  poster?: (string | null) | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'videoblock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "InventoryBlock".
 */
export interface InventoryBlock {
  title: string;
  description: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'inventoryBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroCarsCarousel".
 */
export interface HeroCarsCarousel {
  image: string | Media;
  header: string;
  title: string;
  innerTitle?: string | null;
  text?: string | null;
  inventoryStyle?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'heroCarsCarousel';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MissionGallery".
 */
export interface MissionGallery {
  title: string;
  description?: string | null;
  image1: string | Media;
  image2: string | Media;
  image3: string | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'missionGallery';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LinkBanner".
 */
export interface LinkBanner {
  title: string;
  ctas?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  linkBgColor?: string | null;
  rightImage?: (string | null) | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'linkBanner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "WhenToVisit".
 */
export interface WhenToVisit {
  backgroundImage: string | Media;
  title: string;
  month: string;
  dateRange: string;
  year: number;
  openHour: string;
  closeHour: string;
  bandColor?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'whenToVisit';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "EventLocation".
 */
export interface EventLocation {
  backgroundImage: string | Media;
  ribbonText: string;
  title: string;
  ctas?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'eventLocation';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageTextCTA".
 */
export interface ImageTextCTA {
  image: string | Media;
  title: string;
  description?: string | null;
  ctas?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  reverse?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'imageTextCTA';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContactBanner".
 */
export interface ContactBanner {
  title: string;
  subtitle?: string | null;
  backgroundColor?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'contactBanner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SimpleHeading".
 */
export interface SimpleHeading {
  title: string;
  backgroundColor?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'simpleHeading';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CharityCards".
 */
export interface CharityCards {
  title: string;
  backgroundImage: string | Media;
  cards?:
    | {
        title: string;
        description: string;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'charityCards';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextImageBlock".
 */
export interface TextImageBlock {
  title: string;
  description?: string | null;
  image: string | Media;
  reverse?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'textImageBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ExpectCards".
 */
export interface ExpectCards {
  title: string;
  cards?:
    | {
        image: string | Media;
        title: string;
        description: string;
        url?: string | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'expectCards';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LogoTextCTA".
 */
export interface LogoTextCTA {
  image: string | Media;
  imageAlt?: string | null;
  title: string;
  description?: string | null;
  ctas?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  reverse?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'logoTextCTA';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextWithCTAs".
 */
export interface TextWithCTAs {
  title: string;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'textWithCTAs';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ReachTextCards".
 */
export interface ReachTextCards {
  title: string;
  description?: string | null;
  cards?:
    | {
        text: string;
        backgroundColor?: string | null;
        textColor?: string | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'reachTextCards';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PartnerBenefits".
 */
export interface PartnerBenefits {
  title: string;
  description?: string | null;
  cards?:
    | {
        image: string | Media;
        heading: string;
        body?: string | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'partnerBenefits';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "RightImageCTA".
 */
export interface RightImageCTA {
  title: string;
  description?: string | null;
  image: string | Media;
  cta?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'rightImageCTA';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextImageRight".
 */
export interface TextImageRight {
  title: string;
  /**
   * Short paragraph under the heading.
   */
  description?: string | null;
  image: string | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'textImageRight';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PackagesGrid".
 */
export interface PackagesGrid {
  title: string;
  topRow?:
    | {
        text: string;
        /**
         * e.g. #4B6B3C or rgba(0,0,0,0.05)
         */
        backgroundColor?: string | null;
        textColor?: string | null;
        id?: string | null;
      }[]
    | null;
  bottomRow?:
    | {
        text: string;
        backgroundColor?: string | null;
        textColor?: string | null;
        id?: string | null;
      }[]
    | null;
  showBottomDivider?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'packagesGrid';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AudienceGrid".
 */
export interface AudienceGrid {
  title: string;
  cards: {
    heading: string;
    text: string;
    image: string | Media;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'audienceGrid';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ScheduleSplit".
 */
export interface ScheduleSplit {
  title: string;
  items?:
    | {
        bold: string;
        text: string;
        id?: string | null;
      }[]
    | null;
  image: string | Media;
  reverseLayout?: boolean | null;
  /**
   * Hex/rgb(a)/CSS color token.
   */
  backgroundColor?: string | null;
  textColor?: ('white' | 'black') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'scheduleSplit';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageLeftCenteredList".
 */
export interface ImageLeftCenteredList {
  title: string;
  items?:
    | {
        text: string;
        id?: string | null;
      }[]
    | null;
  image: string | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'imageLeftCenteredList';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MerchShowcase".
 */
export interface MerchShowcase {
  title: string;
  description?: string | null;
  items?:
    | {
        title: string;
        image: string | Media;
        links?:
          | {
              link: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?:
                  | ({
                      relationTo: 'pages';
                      value: string | Page;
                    } | null)
                  | ({
                      relationTo: 'posts';
                      value: string | Post;
                    } | null);
                url?: string | null;
                label: string;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'merchShowcase';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageOverlayText".
 */
export interface ImageOverlayText {
  title: string;
  description?: string | null;
  image: string | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'imageOverlayText';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextImageRightLite".
 */
export interface TextImageRightLite {
  title: string;
  description?: string | null;
  image: string | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'textImageRightLite';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextCTAImageRight".
 */
export interface TextCTAImageRight {
  title: string;
  description?: string | null;
  boldLine?: string | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  image: string | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'textCtaImageRight';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageStepsRight".
 */
export interface ImageStepsRight {
  title: string;
  steps?:
    | {
        heading: string;
        text: string;
        id?: string | null;
      }[]
    | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  image: string | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'imageStepsRight';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextVideoRight".
 */
export interface TextVideoRight {
  title: string;
  description?: string | null;
  smallText1?: string | null;
  smallText2?: string | null;
  /**
   * Upload a video file in the Media collection.
   */
  video: string | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'textVideoRight';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CenteredBannerCTA".
 */
export interface CenteredBannerCTA {
  title: string;
  description?: string | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  showTopLine?: boolean | null;
  showBottomLine?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'centeredBannerCta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "QuickDownloads".
 */
export interface QuickDownloads {
  title: string;
  items?:
    | {
        image: string | Media;
        subtitle: string;
        description?: string | null;
        file?: (string | null) | Media;
        externalUrl?: string | null;
        linkLabel?: string | null;
        newTab?: boolean | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'quickDownloads';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HelpfulLinksGrid".
 */
export interface HelpfulLinksGrid {
  title: string;
  items: {
    title: string;
    description?: string | null;
    image: string | Media;
    links: {
      link: {
        type?: ('reference' | 'custom') | null;
        newTab?: boolean | null;
        reference?:
          | ({
              relationTo: 'pages';
              value: string | Page;
            } | null)
          | ({
              relationTo: 'posts';
              value: string | Post;
            } | null);
        url?: string | null;
        label: string;
      };
      id?: string | null;
    }[];
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'helpfulLinksGrid';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "NewsHeroFilter".
 */
export interface NewsHeroFilter {
  background: string | Media;
  title: string;
  showExcerpt?: boolean | null;
  limit?: number | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'newsHeroFilter';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cars".
 */
export interface Car {
  id: string;
  model: string;
  trim?: string | null;
  slug: string;
  description?: string | null;
  year: number;
  price: number;
  msrp?: number | null;
  annualMileage?: number | null;
  term?: number | null;
  downPayment: number;
  /**
   * Choose how this vehicle will be leased
   */
  leaseType: 'monthly' | 'single-pay';
  /**
   * Enter the total one-pay lease amount (upfront)
   */
  onePayAmount?: number | null;
  /**
   * Optional: Enter specific TTL amount, or leave blank to show "+TTL"
   */
  ttlAmount?: number | null;
  /**
   * Main image for the vehicle (legacy field - consider using Images Gallery below for multiple photos)
   */
  image?: (string | null) | Media;
  /**
   * Upload multiple images for this vehicle. You can select and upload multiple files at once.
   */
  images?:
    | {
        /**
         * Select multiple files to upload them all at once
         */
        image: string | Media;
        /**
         * Alternative text for accessibility (optional)
         */
        alt?: string | null;
        id?: string | null;
      }[]
    | null;
  availability: 'available' | 'sold' | 'new_arrival' | 'best_deal';
  condition: 'new' | 'preowned' | 'demo';
  brand?: (string | null) | Brand;
  lease_term?: number | null;
  /**
   * When enabled, the price will be hidden and "Contact for Price" will be displayed instead.
   */
  hidePrice: boolean;
  hidden: boolean;
  /**
   * Add custom notes that will appear in the Details section
   */
  notes?:
    | {
        note: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "brands".
 */
export interface Brand {
  id: string;
  name: string;
  slug: string;
  logo?: (string | null) | Media;
  cars?: (string | Car)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews".
 */
export interface Review {
  id: string;
  profilePic: string | Media;
  name: string;
  address: string;
  date: string;
  /**
   * Rating from 1 to 5 stars
   */
  rating: number;
  text: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "page-settings".
 */
export interface PageSetting {
  id: string;
  page: string;
  title: string;
  background?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: string;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: string;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'posts';
    value: string | Post;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (string | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        id?: string | null;
        title?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: string;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: string | Post;
      } | null)
    | ({
        relationTo: 'tags';
        value: string | Tag;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'cars';
        value: string | Car;
      } | null)
    | ({
        relationTo: 'brands';
        value: string | Brand;
      } | null)
    | ({
        relationTo: 'reviews';
        value: string | Review;
      } | null)
    | ({
        relationTo: 'page-settings';
        value: string | PageSetting;
      } | null)
    | ({
        relationTo: 'redirects';
        value: string | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: string | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: string | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: string | Search;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: string | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        richText?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        media?: T;
      };
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        customhero?: T | CustomHeroBlockSelect<T>;
        flexGridBox?: T | FlexGridBoxBlockSelect<T>;
        'image-section'?: T | ImageSectionBlockSelect<T>;
        featureSection?: T | FeatureSectionBlockSelect<T>;
        carsCarousel?: T | CarsCarouselSelect<T>;
        aboutUsBlock?:
          | T
          | {
              title?: T;
              description?: T;
              button?:
                | T
                | {
                    label?: T;
                    href?: T;
                  };
              image?: T;
              id?: T;
              blockName?: T;
            };
        journeyCTA?:
          | T
          | {
              title?: T;
              description?: T;
              buttons?:
                | T
                | {
                    label?: T;
                    href?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        twoImageColumn?: T | TwoImageColumnSelect<T>;
        testimonialCarousel?:
          | T
          | {
              backgroundImage?: T;
              title?: T;
              id?: T;
              blockName?: T;
            };
        featureHighlight?:
          | T
          | {
              heading?: T;
              image?: T;
              features?:
                | T
                | {
                    title?: T;
                    description?: T;
                    id?: T;
                  };
              button?:
                | T
                | {
                    label?: T;
                    href?: T;
                  };
              imagePosition?: T;
              id?: T;
              blockName?: T;
            };
        videoblock?: T | VideoBlockSelect<T>;
        secondaryHero?:
          | T
          | {
              backgroundImage?: T;
              title?: T;
              id?: T;
              blockName?: T;
            };
        contactForm?:
          | T
          | {
              heading?: T;
              backgroundImage?: T;
              cardTitle?: T;
              cardPhone?: T;
              cardEmail?: T;
              cardAddress1?: T;
              cardAddress2?: T;
              id?: T;
              blockName?: T;
            };
        inventoryBlock?: T | InventoryBlockSelect<T>;
        heroCarsCarousel?: T | HeroCarsCarouselSelect<T>;
        comingSoonBlock?:
          | T
          | {
              backgroundImage?: T;
              title?: T;
              countdownMonth?: T;
              countdownDay?: T;
              primaryButton?:
                | T
                | {
                    label?: T;
                    url?: T;
                  };
              secondaryButton?:
                | T
                | {
                    label?: T;
                    url?: T;
                  };
              id?: T;
              blockName?: T;
            };
        twoColumnCTA?:
          | T
          | {
              title?: T;
              button?:
                | T
                | {
                    label?: T;
                    url?: T;
                  };
              paragraph?: T;
              id?: T;
              blockName?: T;
            };
        lineBlock?:
          | T
          | {
              color?: T;
              duration?: T;
              id?: T;
              blockName?: T;
            };
        videoCta?:
          | T
          | {
              video?: T;
              poster?: T;
              title?: T;
              paragraph?: T;
              button?:
                | T
                | {
                    label?: T;
                    url?: T;
                  };
              id?: T;
              blockName?: T;
            };
        imageHero?:
          | T
          | {
              backgroundImage?: T;
              title?: T;
              description?: T;
              button?:
                | T
                | {
                    label?: T;
                    url?: T;
                  };
              id?: T;
              blockName?: T;
            };
        twoColumnHero?:
          | T
          | {
              backgroundImage?: T;
              leftTitle?: T;
              primaryButton?:
                | T
                | {
                    label?: T;
                    url?: T;
                  };
              secondaryButton?:
                | T
                | {
                    label?: T;
                    url?: T;
                  };
              rightHeading?: T;
              rightParagraph?: T;
              id?: T;
              blockName?: T;
            };
        centeredHero?:
          | T
          | {
              backgroundImage?: T;
              title?: T;
              description?: T;
              id?: T;
              blockName?: T;
            };
        cardGrid?:
          | T
          | {
              columnsDesktop?: T;
              cards?:
                | T
                | {
                    image?: T;
                    title?: T;
                    description?: T;
                    button?:
                      | T
                      | {
                          label?: T;
                          url?: T;
                        };
                    spanFullOnDesktop?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        imageText?:
          | T
          | {
              image?: T;
              imageAlt?: T;
              title?: T;
              text?: T;
              reverse?: T;
              textAlign?: T;
              id?: T;
              blockName?: T;
            };
        missionGallery?: T | MissionGallerySelect<T>;
        split4060?:
          | T
          | {
              title?: T;
              description?: T;
              button?:
                | T
                | {
                    label?: T;
                    url?: T;
                  };
              image?: T;
              imageAlt?: T;
              reverse?: T;
              id?: T;
              blockName?: T;
            };
        linkBanner?: T | LinkBannerSelect<T>;
        whenToVisit?: T | WhenToVisitSelect<T>;
        eventLocation?: T | EventLocationSelect<T>;
        imageTextCTA?: T | ImageTextCTASelect<T>;
        contactBanner?: T | ContactBannerSelect<T>;
        simpleHeading?: T | SimpleHeadingSelect<T>;
        charityCards?: T | CharityCardsSelect<T>;
        textImageBlock?: T | TextImageBlockSelect<T>;
        expectCards?: T | ExpectCardsSelect<T>;
        logoTextCTA?: T | LogoTextCTASelect<T>;
        textWithCTAs?: T | TextWithCTAsSelect<T>;
        reachTextCards?: T | ReachTextCardsSelect<T>;
        partnerBenefits?: T | PartnerBenefitsSelect<T>;
        rightImageCTA?: T | RightImageCTASelect<T>;
        textImageRight?: T | TextImageRightSelect<T>;
        packagesGrid?: T | PackagesGridSelect<T>;
        audienceGrid?: T | AudienceGridSelect<T>;
        scheduleSplit?: T | ScheduleSplitSelect<T>;
        imageLeftCenteredList?: T | ImageLeftCenteredListSelect<T>;
        merchShowcase?: T | MerchShowcaseSelect<T>;
        imageOverlayText?: T | ImageOverlayTextSelect<T>;
        textImageRightLite?: T | TextImageRightLiteSelect<T>;
        textCtaImageRight?: T | TextCTAImageRightSelect<T>;
        imageStepsRight?: T | ImageStepsRightSelect<T>;
        textVideoRight?: T | TextVideoRightSelect<T>;
        centeredBannerCta?: T | CenteredBannerCTASelect<T>;
        quickDownloads?: T | QuickDownloadsSelect<T>;
        helpfulLinksGrid?: T | HelpfulLinksGridSelect<T>;
        newsHeroFilter?: T | NewsHeroFilterSelect<T>;
        blogTwoColumn?: T | BlogTwoColumnSelect<T>;
        banner?: T | BannerBlockSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
  introContent?: T;
  populateBy?: T;
  relationTo?: T;
  categories?: T;
  limit?: T;
  selectedDocs?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CustomHeroBlock_select".
 */
export interface CustomHeroBlockSelect<T extends boolean = true> {
  backgroundImage?: T;
  leftText?: T;
  rightSmallText?: T;
  titleLine1?: T;
  titleLine2?: T;
  link?: T;
  linkText?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FlexGridBoxBlock_select".
 */
export interface FlexGridBoxBlockSelect<T extends boolean = true> {
  gap?: T;
  matrix?:
    | T
    | {
        items?:
          | T
          | {
              title?: T;
              subtitle?: T;
              flex?: T;
              bgColor?: T;
              textAlign?: T;
              img?: T;
              enableLink?: T;
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageSectionBlock_select".
 */
export interface ImageSectionBlockSelect<T extends boolean = true> {
  backgroundImage?: T;
  heading?: T;
  description?: T;
  link?: T;
  linkText?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeatureSectionBlock_select".
 */
export interface FeatureSectionBlockSelect<T extends boolean = true> {
  backgroundImage?: T;
  heading?: T;
  description?: T;
  link?: T;
  features?:
    | T
    | {
        icon?: T;
        title?: T;
        id?: T;
      };
  buttonText?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CarsCarousel_select".
 */
export interface CarsCarouselSelect<T extends boolean = true> {
  title?: T;
  subTitle?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TwoImageColumn_select".
 */
export interface TwoImageColumnSelect<T extends boolean = true> {
  topTitle?: T;
  topText?: T;
  image1?: T;
  image2?: T;
  approachTitle?: T;
  approachText?: T;
  quote?: T;
  quoteAttribution?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "VideoBlock_select".
 */
export interface VideoBlockSelect<T extends boolean = true> {
  title?: T;
  text?: T;
  buttonText?: T;
  buttonLink?: T;
  video?: T;
  poster?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "InventoryBlock_select".
 */
export interface InventoryBlockSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroCarsCarousel_select".
 */
export interface HeroCarsCarouselSelect<T extends boolean = true> {
  image?: T;
  header?: T;
  title?: T;
  innerTitle?: T;
  text?: T;
  inventoryStyle?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MissionGallery_select".
 */
export interface MissionGallerySelect<T extends boolean = true> {
  title?: T;
  description?: T;
  image1?: T;
  image2?: T;
  image3?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LinkBanner_select".
 */
export interface LinkBannerSelect<T extends boolean = true> {
  title?: T;
  ctas?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  linkBgColor?: T;
  rightImage?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "WhenToVisit_select".
 */
export interface WhenToVisitSelect<T extends boolean = true> {
  backgroundImage?: T;
  title?: T;
  month?: T;
  dateRange?: T;
  year?: T;
  openHour?: T;
  closeHour?: T;
  bandColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "EventLocation_select".
 */
export interface EventLocationSelect<T extends boolean = true> {
  backgroundImage?: T;
  ribbonText?: T;
  title?: T;
  ctas?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageTextCTA_select".
 */
export interface ImageTextCTASelect<T extends boolean = true> {
  image?: T;
  title?: T;
  description?: T;
  ctas?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  reverse?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContactBanner_select".
 */
export interface ContactBannerSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SimpleHeading_select".
 */
export interface SimpleHeadingSelect<T extends boolean = true> {
  title?: T;
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CharityCards_select".
 */
export interface CharityCardsSelect<T extends boolean = true> {
  title?: T;
  backgroundImage?: T;
  cards?:
    | T
    | {
        title?: T;
        description?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextImageBlock_select".
 */
export interface TextImageBlockSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  image?: T;
  reverse?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ExpectCards_select".
 */
export interface ExpectCardsSelect<T extends boolean = true> {
  title?: T;
  cards?:
    | T
    | {
        image?: T;
        title?: T;
        description?: T;
        url?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LogoTextCTA_select".
 */
export interface LogoTextCTASelect<T extends boolean = true> {
  image?: T;
  imageAlt?: T;
  title?: T;
  description?: T;
  ctas?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  reverse?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextWithCTAs_select".
 */
export interface TextWithCTAsSelect<T extends boolean = true> {
  title?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ReachTextCards_select".
 */
export interface ReachTextCardsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  cards?:
    | T
    | {
        text?: T;
        backgroundColor?: T;
        textColor?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PartnerBenefits_select".
 */
export interface PartnerBenefitsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  cards?:
    | T
    | {
        image?: T;
        heading?: T;
        body?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "RightImageCTA_select".
 */
export interface RightImageCTASelect<T extends boolean = true> {
  title?: T;
  description?: T;
  image?: T;
  cta?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextImageRight_select".
 */
export interface TextImageRightSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  image?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PackagesGrid_select".
 */
export interface PackagesGridSelect<T extends boolean = true> {
  title?: T;
  topRow?:
    | T
    | {
        text?: T;
        backgroundColor?: T;
        textColor?: T;
        id?: T;
      };
  bottomRow?:
    | T
    | {
        text?: T;
        backgroundColor?: T;
        textColor?: T;
        id?: T;
      };
  showBottomDivider?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AudienceGrid_select".
 */
export interface AudienceGridSelect<T extends boolean = true> {
  title?: T;
  cards?:
    | T
    | {
        heading?: T;
        text?: T;
        image?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ScheduleSplit_select".
 */
export interface ScheduleSplitSelect<T extends boolean = true> {
  title?: T;
  items?:
    | T
    | {
        bold?: T;
        text?: T;
        id?: T;
      };
  image?: T;
  reverseLayout?: T;
  backgroundColor?: T;
  textColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageLeftCenteredList_select".
 */
export interface ImageLeftCenteredListSelect<T extends boolean = true> {
  title?: T;
  items?:
    | T
    | {
        text?: T;
        id?: T;
      };
  image?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MerchShowcase_select".
 */
export interface MerchShowcaseSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  items?:
    | T
    | {
        title?: T;
        image?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageOverlayText_select".
 */
export interface ImageOverlayTextSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  image?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextImageRightLite_select".
 */
export interface TextImageRightLiteSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  image?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextCTAImageRight_select".
 */
export interface TextCTAImageRightSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  boldLine?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  image?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageStepsRight_select".
 */
export interface ImageStepsRightSelect<T extends boolean = true> {
  title?: T;
  steps?:
    | T
    | {
        heading?: T;
        text?: T;
        id?: T;
      };
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  image?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextVideoRight_select".
 */
export interface TextVideoRightSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  smallText1?: T;
  smallText2?: T;
  video?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CenteredBannerCTA_select".
 */
export interface CenteredBannerCTASelect<T extends boolean = true> {
  title?: T;
  description?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  showTopLine?: T;
  showBottomLine?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "QuickDownloads_select".
 */
export interface QuickDownloadsSelect<T extends boolean = true> {
  title?: T;
  items?:
    | T
    | {
        image?: T;
        subtitle?: T;
        description?: T;
        file?: T;
        externalUrl?: T;
        linkLabel?: T;
        newTab?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HelpfulLinksGrid_select".
 */
export interface HelpfulLinksGridSelect<T extends boolean = true> {
  title?: T;
  items?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "NewsHeroFilter_select".
 */
export interface NewsHeroFilterSelect<T extends boolean = true> {
  background?: T;
  title?: T;
  showExcerpt?: T;
  limit?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BlogTwoColumn_select".
 */
export interface BlogTwoColumnSelect<T extends boolean = true> {
  left?:
    | T
    | {
        textSlice?: T | TextSliceSelect<T>;
        imageSlice?: T | ImageSliceSelect<T>;
      };
  right?:
    | T
    | {
        relatedPosts?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextSlice_select".
 */
export interface TextSliceSelect<T extends boolean = true> {
  text?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageSlice_select".
 */
export interface ImageSliceSelect<T extends boolean = true> {
  image?: T;
  caption?: T;
  description?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock_select".
 */
export interface BannerBlockSelect<T extends boolean = true> {
  style?: T;
  content?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  thumbnail?: T;
  tags?: T;
  thumbnailBadge?: T;
  excerpt?: T;
  layout?:
    | T
    | {
        blogHero?: T | BlogHeroSelect<T>;
        blogTwoColumn?: T | BlogTwoColumnSelect<T>;
      };
  relatedPosts?: T;
  categories?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BlogHero_select".
 */
export interface BlogHeroSelect<T extends boolean = true> {
  background?: T;
  title?: T;
  description?: T;
  darken?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  color?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
  enableAPIKey?: T;
  apiKey?: T;
  apiKeyIndex?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cars_select".
 */
export interface CarsSelect<T extends boolean = true> {
  model?: T;
  trim?: T;
  slug?: T;
  description?: T;
  year?: T;
  price?: T;
  msrp?: T;
  annualMileage?: T;
  term?: T;
  downPayment?: T;
  leaseType?: T;
  onePayAmount?: T;
  ttlAmount?: T;
  image?: T;
  images?:
    | T
    | {
        image?: T;
        alt?: T;
        id?: T;
      };
  availability?: T;
  condition?: T;
  brand?: T;
  lease_term?: T;
  hidePrice?: T;
  hidden?: T;
  notes?:
    | T
    | {
        note?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "brands_select".
 */
export interface BrandsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  logo?: T;
  cars?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews_select".
 */
export interface ReviewsSelect<T extends boolean = true> {
  profilePic?: T;
  name?: T;
  address?: T;
  date?: T;
  rating?: T;
  text?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "page-settings_select".
 */
export interface PageSettingsSelect<T extends boolean = true> {
  page?: T;
  title?: T;
  background?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        id?: T;
        title?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  /**
   * Optional announcement banner above the header.
   */
  banner?: {
    enabled?: boolean | null;
    p1?: string | null;
    p2?: string | null;
  };
  logo: string | Media;
  navItems?:
    | {
        label: string;
        /**
         * If you leave this empty and add dropdownLinks below, this becomes a dropdown.
         */
        url?: string | null;
        /**
         * If any items exist here, this nav item will render as a dropdown.
         */
        dropdownLinks?:
          | {
              label: string;
              url: string;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * e.g., "Buy Ticket"
   */
  ctaLink: {
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: string | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: string | Post;
          } | null);
      url?: string | null;
      label: string;
    };
  };
  /**
   * e.g., "Apply to Exhibit"
   */
  secondaryCTA: {
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: string | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: string | Post;
          } | null);
      url?: string | null;
      label: string;
    };
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  logo?: (string | null) | Media;
  description?: string | null;
  secondaryDescription?: string | null;
  icons?:
    | {
        label?: string | null;
        icon: string | Media;
        url: string;
        id?: string | null;
      }[]
    | null;
  cta: {
    label?: string | null;
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: string | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: string | Post;
          } | null);
      url?: string | null;
      label: string;
    };
  };
  /**
   * Enter full copyright line (e.g., © 2025 Your Brand. All rights reserved.)
   */
  copyright?: string | null;
  linkGroups?:
    | {
        title: string;
        links?:
          | {
              link: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?:
                  | ({
                      relationTo: 'pages';
                      value: string | Page;
                    } | null)
                  | ({
                      relationTo: 'posts';
                      value: string | Post;
                    } | null);
                url?: string | null;
                label: string;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  banner?:
    | T
    | {
        enabled?: T;
        p1?: T;
        p2?: T;
      };
  logo?: T;
  navItems?:
    | T
    | {
        label?: T;
        url?: T;
        dropdownLinks?:
          | T
          | {
              label?: T;
              url?: T;
              id?: T;
            };
        id?: T;
      };
  ctaLink?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
      };
  secondaryCTA?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  logo?: T;
  description?: T;
  secondaryDescription?: T;
  icons?:
    | T
    | {
        label?: T;
        icon?: T;
        url?: T;
        id?: T;
      };
  cta?:
    | T
    | {
        label?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
      };
  copyright?: T;
  linkGroups?:
    | T
    | {
        title?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    global?: string | null;
    user?: (string | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}